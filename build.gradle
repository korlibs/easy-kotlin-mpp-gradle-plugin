buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("com.gradle.publish:plugin-publish-plugin:0.13.0")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
		//classpath("org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:$kotlinVersion")
    }
}

plugins {
    id "java-gradle-plugin"
	//id("io.github.gradle-nexus.publish-plugin") version "1.0.0"
}


apply plugin: "com.gradle.plugin-publish"
apply plugin: "kotlin"
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url = uri("https://plugins.gradle.org/m2/") }
}

String forcedVersion = System.getenv('FORCED_KORGE_PLUGINS_VERSION')

if (forcedVersion != null) {
	allprojects {
		this.version = forcedVersion?.replace("refs/tags/v", "")?.replace("v", "") ?: project.version
	}
}

def signingSecretKeyRingFile = System.getenv("ORG_GRADLE_PROJECT_signingSecretKeyRingFile") ?: project.findProperty("signing.secretKeyRingFile")?.toString()

// gpg --armor --export-secret-keys foobar@example.com | awk 'NR == 1 { print "signing.signingKey=" } 1' ORS='\\n'
def signingKey = System.getenv("ORG_GRADLE_PROJECT_signingKey") ?: project.findProperty("signing.signingKey")?.toString()
def signingPassword = System.getenv("ORG_GRADLE_PROJECT_signingPassword") ?: project.findProperty("signing.password")?.toString()

if (signingSecretKeyRingFile != null || signingKey != null) {
	signing {
		required { !project.version.endsWith('-SNAPSHOT') }
		if (signingKey != null) {
			useInMemoryPgpKeys(signingKey, signingPassword)
		}
		sign(publishing.publications)
	}
}

dependencies {
    testImplementation("junit:junit:4.13.1")
	testImplementation("org.jetbrains.kotlin:kotlin-test")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin")
    implementation("com.android.tools.build:gradle:4.0.2")
    compile gradleApi()
    compile localGroovy()
}


pluginBundle {
    website = "https://github.com/korlibs/easy-kotlin-mpp-gradle-plugin"
    vcsUrl = "https://github.com/korlibs/easy-kotlin-mpp-gradle-plugin"
    tags = ["korlibs", "kotlin", "kotlin-mpp"]
}

gradlePlugin {
    plugins {
        easyKotlinMppGradlePlugin {
            id = 'com.soywiz.korlibs.easy-kotlin-mpp-gradle-plugin'
            displayName = 'easy-kotlin-mpp-gradle-plugin'
            description = 'Allows to build Kotlin MPP projects easily'
            implementationClass = 'com.soywiz.korlibs.KorlibsPlugin'
        }
    }
}

//def publishUser = (rootProject.findProperty("BINTRAY_USER") ?: project.findProperty("bintrayUser") ?: System.getenv("BINTRAY_USER"))?.toString()
//def publishPassword = (rootProject.findProperty("BINTRAY_KEY") ?: project.findProperty("bintrayApiKey") ?: System.getenv("BINTRAY_API_KEY") ?: System.getenv("BINTRAY_KEY"))?.toString()

def sonatypePublishUser = (rootProject.findProperty("SONATYPE_USERNAME") ?: project.findProperty("sonatypeUsername")?.toString())
def sonatypePublishPassword = (rootProject.findProperty("SONATYPE_PASSWORD") ?: project.findProperty("sonatypePassword")?.toString())

if (sonatypePublishUser == null || sonatypePublishPassword == null) {
    println("Required sonatypeUsername and sonatypePassword in ~/.gradle/gradle.properties")
}


new File(rootDir, "src/main/kotlin/com/soywiz/korlibs/KorlibsKotlinVersion.kt").write("package com.soywiz.korlibs\n\nval KORLIBS_KOTLIN_VERSION = \"${kotlinVersion}\"")

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
}

publishing {
    repositories {
		def GITHUB_REPOSITORY = System.getenv("GITHUB_REPOSITORY")
		def GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")
		//def GITHUB_REPOSITORY = "korlibs/easy-kotlin-mpp-gradle-plugin"
		//def GITHUB_TOKEN = "test"
		if (GITHUB_REPOSITORY != null && GITHUB_TOKEN != null) {
			maven {
				name = "GitHubPackages"
				url = uri("https://maven.pkg.github.com/${GITHUB_REPOSITORY}")
				credentials(HttpHeaderCredentials) {
					name = "authorization"
					value = "Bearer ${GITHUB_TOKEN}"
				}
			}
		}

		//if (publishUser && publishPassword) {
		//	maven {
		//		credentials {
		//			username = publishUser
		//			password = publishPassword
		//		}
		//		url = uri("https://api.bintray.com/maven/${project.property("project.bintray.org")}/${project.property("project.bintray.repository")}/${project.property("project.bintray.package")}/")
		//	}
		//}

		if (sonatypePublishUser && sonatypePublishPassword) {
			maven {
				credentials {
					username = sonatypePublishUser
					password = sonatypePublishPassword
				}
				if (version.toString().contains("-SNAPSHOT")) {
					url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
				} else {
					url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
				}
			}
		}
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
            artifact(sourcesJar)
            artifact(javadocJar)

            pom {
                name = project.name
                description = project.property("project.description")
                url = project.property("project.scm.url")
				developers {
					developer {
						id = project.property("project.author.id")
						name = project.property("project.author.name")
						email = project.property("project.author.email")
					}
				}
                licenses {
                    license {
                        name = project.property("project.license.name")
                        url = project.property("project.license.url")
                    }
                }
                scm {
                    url = project.property("project.scm.url")
                }
            }
        }
    }
}

tasks.create("externalReleaseMavenCentral", GradleBuild) {
	it.dependsOn("publishToMavenLocal")
	it.tasks = ["releaseMavenCentral"]
	File tempDir = null
	it.doFirst {
		tempDir = File.createTempDir()
		println("Created dir $tempDir...")
		dir(tempDir)
		new File(tempDir, "settings.gradle").text = ''
		new File(tempDir, "build.gradle").text = """
			\tbuildscript {
			\t\trepositories {
			\t\t\tmavenLocal()
			\t\t\tmavenCentral()
			\t\t\tgoogle()
			\t\t\tmaven { url = uri("https://plugins.gradle.org/m2/") }
			\t\t}
			\t\tdependencies {
			\t\t\tclasspath("com.soywiz.korlibs:easy-kotlin-mpp-gradle-plugin:${project.version}")
			\t\t}
			\t}
			
			project.group = '${project.group}'
			\tapply plugin: "com.soywiz.korlibs.easy-kotlin-mpp-gradle-plugin"
		"""
	}
	it.doLast {
		tempDir?.deleteDir()
	}
}

publish.finalizedBy(externalReleaseMavenCentral)

//publish.doLast {
//	def subject = project.property("project.bintray.org")
//	def repo = project.property("project.bintray.repository")
//	def _package = project.property("project.bintray.package")
//	def version = project.version
//
//	((HttpURLConnection)new URL("https://bintray.com/api/v1/content/$subject/$repo/$_package/$version/publish").openConnection()).with({
//		requestMethod = 'POST'
//		doOutput = true
//
//		setRequestProperty("Authorization", "Basic " + "$publishUser:$publishPassword".bytes.encodeBase64().toString())
//		outputStream.withPrintWriter({printWriter ->
//			printWriter.write('{"discard": false, "publish_wait_for_secs": -1}')
//		})
//		System.out.println(inputStream.text)
//	})
//}
